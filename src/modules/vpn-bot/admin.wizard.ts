import { Ctx, On, Scene, SceneEnter } from 'nestjs-telegraf';
import { ADMIN_SCENE_ID } from '../../app.constants';
import { Markup } from 'telegraf';
import { SubscriberUseCase } from 'src/use-cases/subscriber/subscriber.use-case';
import { SceneContext } from 'telegraf/typings/scenes';
import { SubscriptionPlan, SubscriptionStatus } from 'src/types';

@Scene(ADMIN_SCENE_ID)
export class AdminWizard {
  constructor(private readonly subscriberUseCase: SubscriberUseCase) {}

  @SceneEnter()
  async enter(@Ctx() ctx: SceneContext) {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.inlineKeyboard([
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'add_user'),
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'delete_user'),
      ]),
    );
  }

  @On('callback_query')
  async onAction(@Ctx() ctx: SceneContext) {
    const action = (ctx.update as any).callback_query.data;

    ctx.answerCbQuery();

    if (action === 'add_user' || action === 'delete_user') {
      ctx.scene.session.state = {
        action,
      };

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º:');
    }
  }

  @On('text')
  async onNickname(@Ctx() ctx: SceneContext) {
    const action = (ctx.scene.session.state as any).action;
    const nickname = (ctx.update as any).message.text as string;
    const subscriber = this.subscriberUseCase.getSubscriberByNickname(nickname);

    if (!subscriber) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (action === 'add_user') {
      this.subscriberUseCase.updateSubscriber({
        ...subscriber,
        exparedAt: Date.now(),
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          plan: SubscriptionPlan.MONTH,
        },
      });
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º ${nickname} –¥–æ–±–∞–≤–ª–µ–Ω`);

      return;
    }

    if (action === 'delete_user') {
      this.subscriberUseCase.removeSubscriber(subscriber);
      await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º ${nickname} —É–¥–∞–ª–µ–Ω`);

      return;
    }

    await ctx.scene.leave();
  }
}
